{{ if .Values.chaos.enabled }}

kind: ConfigMap
metadata:
  name: {{ template "nodegroup.fullname" . }}-chaos-noms-config
  labels:
    app: {{ template "nodegroup.name" . }}
    chart: {{ template "nodegroup.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
apiVersion: v1
data:
  make-snapshot.sh: |

    log () {
      >&2 echo "chaos-noms-make-snapshot: $@"
    }

    err () {
      >&2 echo "chaos-noms-make-snapshot: $@"
      exit 1
    }

    # s3_upload takes the first argument as the full local file path and uploads it to s3
    # at the location defined by the local variable $s3_path
    s3_upload() {

      local local_file=$1
      local s3_file=$2

      # puts the snapshot somewhere safe while it's being built.
      temp_token=$(/bin/bash /root/redis-cli.sh -h $R_HOST get "snapshot-temp-token")

      # prepare headers and signature
      the_date=$(date -R)
      s3_path="/{{ .Values.aws.snapshotBucket }}/{{ .Values.networkName }}/${temp_token}/${this_node}-${height}/$s3_file"
      content_type="application/octet-stream"
      signable_bytes="PUT\n\n${content_type}\n${the_date}\n${s3_path}"
      signature=$(echo -en $signable_bytes | openssl sha1 -hmac $AWS_SECRET -binary | base64)

      # upload the local file
      curl -X PUT -T "$local_file" \
        -H "Host: s3.amazonaws.com" \
        -H "Date: $the_date" \
        -H "Content-Type: $content_type" \
        -H "Authorization: AWS $AWS_KEY:$signature" \
        "http://s3.amazonaws.com$s3_path"

    }

    this_node=chaos
    this_app=noms

    # begin making snapshot

    # wait for redis
    log "Pinging redis."
    while true ; do
      # get redis readiness
      if ! /bin/bash /root/redis-cli.sh -h $R_HOST PING; then
        log "Waiting for redis to pong."
        sleep 1
      else
        log "Redis is ready."
        break
      fi
    done

    # wait for height value
    while [ "$height" == "-1" ] || [ -z "$height" ]; do
      sleep 2
      height=$(timeout -t 2 /bin/bash /root/redis-cli.sh -h $R_HOST get "snapshot-$CHAIN-height")
    done

    log "height is $height"

    # upload the database

    # check to see if the snapshot is already there
    tar_file=$THIS_SERVICE.tgz
    s3_path="/{{ .Values.aws.snapshotBucket }}/{{ .Values.networkName }}/${this_node}-${height}/${tar_file}"

    if curl_response=$(curl -I -f "http://s3.amazonaws.com$s3_path"); then
      log "Snapshot $s3_path already exists. Will not upload."
    else
      log "Uploading snapshot $s3_path."

      (
        cd /noms/data
        tar cvzf /root/$tar_file *
      )

      s3_upload /root/$tar_file $tar_file

    fi

    # delete service flag
    /bin/bash /root/redis-cli.sh -h $R_HOST DEL "snapshot-$THIS_SERVICE"

  shutdown-waits.sh: |

    log () {
      >&2 echo "$THIS_SERVICE-shutdown: $@"
    }

    err () {
      >&2 echo "$THIS_SERVICE-shutdown: $@"
      exit 1
    }

    # wait for waits until a service is shut down
    wait_for() {
      service=$1
      pod=$2
      port=$3

      log starting $service wait loop
      until ! nc -z -w 5 $pod $port; do
        log waiting for $pod on $port to become inactive
        sleep 2
      done
    }

    log "Starting wait loops"
    wait_for chaosnode {{ template "nodegroup.fullname" . }}-chaosode-service {{ .Values.chaosnode.port }}
    log "Done"

{{ end }}
