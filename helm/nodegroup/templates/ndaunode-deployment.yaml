{{ if .Values.ndau.enabled }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nodegroup.fullname" . }}-ndaunode
  labels:
    app: {{ template "nodegroup.name" . }}
    chart: {{ template "nodegroup.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "nodegroup.name" . }}-ndaunode
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "nodegroup.name" . }}-ndaunode
        release: {{ .Release.Name }}
    spec:
      initContainers:
      - name: noms-wait
        image: "{{ .Values.ndau.deployUtils.image.repository }}:{{ .Values.ndau.deployUtils.image.tag }}"
        imagePullPolicy: {{ .Values.ndau.deployUtils.image.pullPolicy }}
        command:
          - sh
          - -c
          - |-
            echo starting noms wait loop
            until curl -v {{ template "nodegroup.fullname" . }}-ndau-noms-service:{{ .Values.ndau.noms.port }} --connect-timeout 5; do
              echo waiting for {{ template "nodegroup.fullname" . }}-ndau-noms-service
              sleep 5
            done
      - name: chaos-wait
        image: "{{ .Values.ndau.deployUtils.image.repository }}:{{ .Values.ndau.deployUtils.image.tag }}"
        imagePullPolicy: {{ .Values.ndau.deployUtils.image.pullPolicy }}
        command:
          - bash
          - -c
          - |-
            fullname="{{ template "nodegroup.fullname" . }}"
            echo $fullname
            RELEASE=$(echo ${fullname//-/_} | awk '{print toupper($0)}')
            echo $RELEASE
            HOST_VAR=${RELEASE}_CHAOS_TENDERMINT_SERVICE_SERVICE_HOST
            echo $HOST_VAR
            RPC_PORT_VAR=${RELEASE}_CHAOS_TENDERMINT_SERVICE_SERVICE_PORT_RPC
            echo $RPC_PORT_VAR

            host=${!HOST_VAR}
            echo $host
            rpc_port=${!RPC_PORT_VAR}
            echo $rpc_port

            chaos_address=http://${host}:${rpc_port}
            echo $chaos_address

            until curl -v $chaos_address; do
              echo waiting for $chaos_address
              sleep 5
            done
      - name: redis-wait
        image: "{{ .Values.ndau.deployUtils.image.repository }}:{{ .Values.ndau.deployUtils.image.tag }}"
        imagePullPolicy: {{ .Values.ndau.deployUtils.image.pullPolicy }}
        command:
          - sh
          - -c
          - |-
            echo starting redis wait loop
            until nc -z -w 5 {{ template "nodegroup.fullname" . }}-ndau-redis-service {{ .Values.ndau.redis.port }}; do
              echo waiting for {{ template "nodegroup.fullname" . }}-ndau-redis-service
              sleep 5
            done
      - name: config
        image: "{{ .Values.ndau.deployUtils.image.repository }}:{{ .Values.ndau.deployUtils.image.tag }}"
        imagePullPolicy: {{ .Values.ndau.deployUtils.image.pullPolicy }}
        command: ["/bin/bash", "/root/init.sh"]
        env:
        - name: NDAUHOME
          value: "/root/.ndau"
        volumeMounts:
        - name: ndau-config-init
          mountPath: /root/init.sh
          subPath: init.sh
        - name: config-toml
          mountPath: /root/config-ro/config.toml
          subPath: config.toml
        - mountPath: "/root/.ndau"
          name: ndau-home-volume
      containers:
      - name: ndaunode
        image: "{{ .Values.ndaunode.image.repository }}:{{ .Values.ndaunode.image.tag }}"
        imagePullPolicy: {{ .Values.ndaunode.image.pullPolicy }}
        command:
          - sh
          - -c
          - |-
            ndaunode \
            -spec http://{{ template "nodegroup.fullname" . }}-ndau-noms-service:{{ .Values.ndau.noms.port }} \
            -addr 0.0.0.0:{{ required ".Values.ndaunode.port required" .Values.ndaunode.port }} \
            -index {{ template "nodegroup.fullname" . }}-ndau-redis-service:{{ .Values.ndau.redis.port }} || sleep 600
        ports:
        - containerPort: {{ .Values.ndaunode.port }}
        env:
        - name: HONEYCOMB_KEY
          value: {{ .Values.honeycomb.key }}
        - name: HONEYCOMB_DATASET
          value: {{ .Values.honeycomb.dataset }}
        - name: NDAUHOME
          value: "/root/.ndau"
        volumeMounts:
        - mountPath: "/root/.ndau"
          name: ndau-home-volume
        resources:
          requests:
            memory: {{ .Values.ndaunode.resources.requests.memory }}
            cpu: {{ .Values.ndaunode.resources.requests.cpu }}
          limits:
            memory: {{ .Values.ndaunode.resources.limits.memory }}
            cpu: {{ .Values.ndaunode.resources.limits.cpu }}
      volumes:
      - name: ndau-home-volume
        persistentVolumeClaim:
          claimName: {{ template "nodegroup.fullname" . }}-ndaunode-claim
      - name: config-toml
        configMap:
          name: {{ template "nodegroup.fullname" . }}-ndau-config
          items:
          - key: config.toml
            path: config.toml
      - name: ndau-config-init
        configMap:
          name: {{ template "nodegroup.fullname" . }}-ndau-config
          items:
          - key: init.sh
            path: init.sh

{{ end }}
