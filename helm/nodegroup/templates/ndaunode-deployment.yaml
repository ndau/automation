{{ if .Values.ndau.enabled }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nodegroup.fullname" . }}-ndaunode
  labels:
    app: {{ template "nodegroup.name" . }}
    chart: {{ template "nodegroup.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "nodegroup.name" . }}-ndaunode
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "nodegroup.name" . }}-ndaunode
        release: {{ .Release.Name }}
    spec:
      initContainers:
      - name: waits
        image: "{{ .Values.ndau.deployUtils.image.repository }}:{{ .Values.ndau.deployUtils.image.tag }}"
        imagePullPolicy: {{ .Values.ndau.deployUtils.image.pullPolicy }}
        command:  ["/bin/bash", "/root/startup-waits.sh"]
        volumeMounts:
        - mountPath: /root/startup-waits.sh
          name: ndaunode-config
          subPath: startup-waits.sh
      - name: config
        image: "{{ .Values.ndau.deployUtils.image.repository }}:{{ .Values.ndau.deployUtils.image.tag }}"
        imagePullPolicy: {{ .Values.ndau.deployUtils.image.pullPolicy }}
        command: ["/bin/bash", "/root/init.sh"]
        env:
        - name: NDAUHOME
          value: "/root/.ndau"
        volumeMounts:
        - mountPath: /root/shutdown-waits.sh
          name: ndaunode-config
          subPath: shutdown-waits.sh
        - mountPath: /root/startup-waits.sh
          name: ndaunode-config
          subPath: startup-waits.sh
        - mountPath: /root/init.sh
          name: ndaunode-config
          subPath: init.sh
        - mountPath: /root/config-ro/config.toml
          name: ndaunode-config
          subPath: config.toml
        - mountPath: "/root/.ndau"
          name: ndau-home-volume
      containers:
      - name: ndaunode
        image: "{{ .Values.ndaunode.image.repository }}:{{ .Values.ndaunode.image.tag }}"
        imagePullPolicy: {{ .Values.ndaunode.image.pullPolicy }}
        command: ["/bin/bash", "/root/ndaunode-start.sh"]
        ports:
        - containerPort: {{ .Values.ndaunode.port }}
        env:
        - name: THIS_SERVICE
          value: chaosnode
        - name: HONEYCOMB_KEY
          value: {{ .Values.honeycomb.key }}
        - name: HONEYCOMB_DATASET
          value: {{ .Values.honeycomb.dataset }}
        - name: NODE_ID
          value: {{ .Values.ndau.tendermint.moniker }}
        - name: NDAUHOME
          value: "/root/.ndau"
        volumeMounts:
        - mountPath: "/root/.ndau"
          name: ndau-home-volume
        - mountPath: /root/ndaunode-start.sh
          name: ndaunode-config
          subPath: ndaunode-start.sh
        - mountPath: /root/redis-cli.sh
          name: ndaunode-config
          subPath: redis-cli.sh
        readinessProbe:
          tcpSocket:
            port: {{ .Values.chaosnode.port }}
          initialDelaySeconds: 30
          periodSeconds: 30
        livenessProbe:
          tcpSocket:
            port: {{ .Values.chaosnode.port }}
          initialDelaySeconds: 30
          periodSeconds: 30
        resources:
          requests:
            memory: {{ .Values.ndaunode.resources.requests.memory }}
            cpu: {{ .Values.ndaunode.resources.requests.cpu }}
          limits:
            memory: {{ .Values.ndaunode.resources.limits.memory }}
            cpu: {{ .Values.ndaunode.resources.limits.cpu }}
      volumes:
      - name: ndau-home-volume
        persistentVolumeClaim:
          claimName: {{ template "nodegroup.fullname" . }}-ndaunode-claim
      - name: ndaunode-config
        configMap:
          name: {{ template "nodegroup.fullname" . }}-ndaunode-config

{{ end }}
