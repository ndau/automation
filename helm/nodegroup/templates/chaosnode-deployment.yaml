{{ if .Values.chaos.enabled }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nodegroup.fullname" . }}-chaosnode
  labels:
    app: {{ template "nodegroup.name" . }}
    chart: {{ template "nodegroup.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "nodegroup.name" . }}-chaosnode
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "nodegroup.name" . }}-chaosnode
        release: {{ .Release.Name }}
    spec:
      terminationGracePeriodSeconds: 120 # 2 minutes. Increase grace period from default 30 seconds for snapshot creation.
      {{ if .Values.minikube }}
      imagePullSecrets:
      - name: awsecr-cred
      {{ end }}
      initContainers:
      - name: noms-wait
        image: "{{ .Values.chaos.deployUtils.image.repository }}:{{ .Values.chaos.deployUtils.image.tag }}"
        imagePullPolicy: {{ .Values.chaos.deployUtils.image.pullPolicy }}
        command:
          - sh
          - -c
          - |-
            echo Starting noms wait loop
            until curl -v {{ template "nodegroup.fullname" . }}-chaos-noms-service:{{ .Values.chaos.noms.port }} --connect-timeout 5
            do echo waiting for {{ template "nodegroup.fullname" . }}-chaos-noms-service
              sleep 5
            done
      - name: redis-wait
        image: "{{ .Values.chaos.deployUtils.image.repository }}:{{ .Values.chaos.deployUtils.image.tag }}"
        imagePullPolicy: {{ .Values.chaos.deployUtils.image.pullPolicy }}
        command:
          - sh
          - -c
          - |-
            echo Starting redis wait loop
            until nc -z -w 5 {{ template "nodegroup.fullname" . }}-chaos-redis-service {{ .Values.chaos.redis.port }}; do
              echo waiting for {{ template "nodegroup.fullname" . }}-chaos-redis-service
              sleep 5
            done

      - name: chaos-address
        image: "{{ .Values.ndau.deployUtils.image.repository }}:{{ .Values.ndau.deployUtils.image.tag }}"
        imagePullPolicy: {{ .Values.ndau.deployUtils.image.pullPolicy }}
        command:
          - bash
          - -c
          - |-
            fullname="{{ template "nodegroup.fullname" . }}"
            echo "$fullname: $fullname"
            RELEASE=$(echo ${fullname//-/_} | awk '{print toupper($0)}')
            echo "RELEASE: $RELEASE"
            HOST_VAR=${RELEASE}_NDAU_TENDERMINT_SERVICE_SERVICE_HOST
            echo "HOST_VAR: $HOST_VAR"
            RPC_PORT_VAR=${RELEASE}_NDAU_TENDERMINT_SERVICE_SERVICE_PORT_RPC
            echo "RPC_PORT_VAR: $RPC_PORT_VAR"

            host=${!HOST_VAR}
            echo "host: $host"
            rpc_port=${!RPC_PORT_VAR}
            echo "rpc_port: $rpc_port"

            chaos_address=http://${host}:${rpc_port}
            printf $chaos_address > /root/.ndau/chaos-address
        volumeMounts:
        - mountPath: "/root/.ndau"
          name: ndau-home-volume


      - name: chaosnode-config-ndau
        image: "{{ .Values.chaosnode.image.repository }}:{{ .Values.chaosnode.image.tag }}"
        imagePullPolicy: {{ .Values.chaosnode.image.pullPolicy }}
        args: [
          "--set-ndaunode", "$(cat /root/.ndau/chaos-address)"
        ]
        env:
        - name: HONEYCOMB_KEY
          value: {{ .Values.honeycomb.key }}
        - name: HONEYCOMB_DATASET
          value: {{ .Values.honeycomb.dataset }}-chaos
        - name: NDAUHOME
          value: "/root/.ndau"
        volumeMounts:
        - mountPath: "/root/.ndau"
          name: ndau-home-volume
      containers:
      - name: chaosnode
        image: "{{ .Values.chaosnode.image.repository }}:{{ .Values.chaosnode.image.tag }}"
        imagePullPolicy: {{ .Values.chaosnode.image.pullPolicy }}
        args: [
          "-spec", "http://{{ template "nodegroup.fullname" . }}-chaos-noms-service:{{ .Values.chaos.noms.port }}",
          "-addr", "0.0.0.0:{{ required ".Values.chaosnode.port required" .Values.chaosnode.port }}",
          "-index", "{{ template "nodegroup.fullname" . }}-chaos-redis-service:{{ .Values.chaos.redis.port }}"
        ]
        ports:
        - containerPort: {{ .Values.chaosnode.port }}
        env:
        - name: HONEYCOMB_KEY
          value: {{ .Values.honeycomb.key }}
        - name: HONEYCOMB_DATASET
          value: {{ .Values.honeycomb.dataset }}
        - name: NDAUHOME
          value: "/root/.ndau"
        volumeMounts:
        - mountPath: "/root/.ndau"
          name: ndau-home-volume
        resources:
          requests:
            memory: {{ .Values.chaosnode.resources.requests.memory }}
            cpu: {{ .Values.chaosnode.resources.requests.cpu }}
          limits:
            memory: {{ .Values.chaosnode.resources.limits.memory }}
            cpu: {{ .Values.chaosnode.resources.limits.cpu }}
      volumes:
      - name: ndau-home-volume
        persistentVolumeClaim:
          claimName: {{ template "nodegroup.fullname" . }}-chaosnode-claim

{{ end }}
