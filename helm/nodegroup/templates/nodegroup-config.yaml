kind: ConfigMap
metadata:
  name: {{ template "nodegroup.fullname" . }}-nodegroup-config
  labels:
    app: {{ template "nodegroup.name" . }}
    chart: {{ template "nodegroup.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
apiVersion: v1
data:

  tm-home: "/tendermint"

  restore-snapshot.sh: |
    #!/bin/bash

    # import lib scripts
    for f in /root/lib/*.sh; do source $f; done

    # This depends on three variables being set prior to running.
    #
    # DATA_DIR            The directory that will recieve the snapshot
    #                     e.g. /noms/data
    # DATA_EXISTS_FILE    A file, such that it's existence means the database exists.
    #                     e.g. /noms/data/manifest
    # SNAPSHOT_FILE       The name of the tarball file on s3 to use.
    #                     e.g. ndau-noms.tgz


    log () {
      >&2 echo "restore-snapshot-$SNAPSHOT_FILE:" "$@"
    }

    err () {
      >&2 echo "restore-snapshot-$SNAPSHOT_FILE:" "$@"
      exit 1
    }

    # download
    download() {
      log "Downloading and restoring snapshot."
      local token
      if [ ! -z "$SNAPSHOT_CODE" ]; then
        log "Using snapshot code: $SNAPSHOT_CODE"
        token={{ .Values.networkName }}/$SNAPSHOT_CODE
      else
        # list all snapshots for this network and this chain
        s3_search_url=http://{{ .Values.aws.snapshotBucket }}.s3.amazonaws.com?prefix={{ .Values.networkName }}/${CHAIN}
        log "s3_search_url: $s3_search_url"
        if search_results=$(curl $s3_search_url); then
          log "Latest snapshot list: $search_results"
          # process XML list, get the largest height
          latest_snapshot=$(echo $search_results | perl -nle'print $& while m{(?<=<Key>).*?(?=</Key>)}g' | sed "s/^{{ .Values.networkName }}\/${CHAIN}-//" | sort -n | tail -n 1 | awk -F'/' "{print \"{{ .Values.networkName }}/${CHAIN}-\" \$1}")
          log "Latest snapshot: $latest_snapshot"
          # test to see if snapshot file is there. If not, default to genesis.
          latest_height_url="https://s3.amazonaws.com/{{ .Values.aws.snapshotBucket }}/$latest_snapshot/$SNAPSHOT_FILE"
          if curl -I -f "$latest_height_url"; then
            download_url=$latest_height_url
            log "Using latest snapshot: $download_url"
          else
            log "Could not find latest height URL: $latest_height_url. Defaulting to genesis."
            token={{ .Values.networkName }}/genesis
          fi
        else
          log "Cannot get snapshot list from s3 $s3_search_url. Defaulting to genesis."
          token={{ .Values.networkName }}/genesis
        fi
      fi
      if [ ! $NO_CLEAR == "true" ]; then
        rm -rf "$DATA_DIR"
        log "Cleared data directory."
        mkdir -p "$DATA_DIR"
      fi
      [ -z "$download_url" ] && download_url="https://s3.amazonaws.com/{{ .Values.aws.snapshotBucket }}/$token/$SNAPSHOT_FILE"
      log "Downloading from: $download_url"
      [ ! -d "$DATA_DIR" ] && mkdir -p "$DATA_DIR" # ensure directory
      # download and unzip if it's there
      curl -I -f $download_url && \
        curl $download_url | tar xzvf - -C "$DATA_DIR"
    }

    if [ ! -f "$DATA_EXISTS_FILE" ]; then
      download
    else
      log "Data present, not downloading snapshot."
    fi

  tendermint-init.sh: |

    # import lib scripts
    for f in /root/lib/*.sh; do source $f; done

    log () {
      >&2 echo "$THIS_SERVICE-init: $@"
    }

    err () {
      >&2 echo "$THIS_SERVICE-init: $@"
      exit 1
    }

    TM_CONFIG=$TMHOME/config
    RO_CONFIG=/root/config-ro
    TM_DATA=$TMHOME/data
    RO_DATA=/root/data-ro

    # ensure directory for read-writeable config files
    if [ ! -d $TM_CONFIG ]; then
      mkdir -p $TM_CONFIG && log "Created $TM_CONFIG directory" || log "Could not create $TM_CONFIG"
    else
      log "Directory $TM_CONFIG already exists."
    fi
    # ensure directory for read-writeable data files
    if [ ! -d $TM_DATA ]; then
      mkdir -p $TM_DATA && log "Created $TM_DATA directory" || log "Could not create $TM_DATA"
    else
      log "Directory $TM_DATA already exists."
    fi

    # get app_hash created in a previous container
    app_hash=$(cat $TMHOME/app_hash)
    log "app hash created in init container: $app_hash"

    # initialize if config does not already exist
    if [ ! -f "$TM_CONFIG/init-done" ]; then

      # check snapshot for genesis.json
      DATA_DIR=$TM_CONFIG \
      DATA_EXISTS_FILE=$TM_CONFIG/genesis.json \
      SNAPSHOT_FILE=$CHAIN-genesis.tgz \
      NO_CLEAR=true \
        /bin/bash /root/restore-snapshot.sh >&2

      # copy readonly files from config map to real config directory
      # genesis.json is handled below
      if cp $RO_CONFIG/priv_validator_key.json $TM_CONFIG && \
         cp $RO_CONFIG/node_key.json $TM_CONFIG && \
         cp $RO_CONFIG/config.toml $TM_CONFIG; then
        log "Read only files copied to tendermint config"
      else
        err "Could not copy read-only files to tendermint config"
      fi

      # copy all readonly files from data map to real data directory
      if cp $RO_DATA/* $TM_DATA; then
        log "Read only files copied to tendermint data"
      else
        err "Could not copy read-only files to tendermint data"
      fi

      # if genesis.json does not exist
      #   then it was not downloaded in the snapshot
      #   and it was not previously there
      if [ ! -f "$TM_CONFIG/genesis.json" ]; then
        log "Copying readonly and updating app_hash"
        if [ -z $(jq -r ".app_hash" $RO_CONFIG/genesis.json) ]; then
          log "app_hash is empty, updating with $app_hash"
          if jq ".app_hash=\"$app_hash\"" $RO_CONFIG/genesis.json > $TM_CONFIG/genesis.json; then
            log "$RO_CONFIG/genesis.json:\n$(cat $RO_CONFIG/genesis.json)"
            log "$TM_CONFIG/genesis.json:\n$(cat $TM_CONFIG/genesis.json)"
          else
            err "Failed to copy readonly genesis.json and update with app hash."
          fi
        else
          log "app_hash in readonly genesis.json is not empty ($(jq -r ".app_hash" $RO_CONFIG/genesis.json))"
          if cp $RO_CONFIG/genesis.json $TM_CONFIG/genesis.json; then
            log "genesis.json copied as is from readonly"
            log "$TM_CONFIG/genesis.json:\n$(cat $TM_CONFIG/genesis.json)"
          else
            err "Failed to copy readonly genesis.json"
          fi
        fi
      else
        log "$TM_CONFIG/genesis.json exists, will not update app_hash."
      fi

      # output for the logs
      log "Final config files"
      log $(cat $TM_CONFIG/* | sed ':a;N;$!ba;s/\n/\\n/g')

      # mark this as having initialized
      touch $TM_CONFIG/init-done && log "Touched $TM_CONFIG/init-done"

    else
      log "Volume already has configuration. Not intializing config."
    fi

    # check snapshot
    DATA_DIR=/tendermint/data \
    DATA_EXISTS_FILE=/tendermint/data/blockstore.db/LOCK \
    SNAPSHOT_FILE=$CHAIN-tm.tgz \
      /bin/bash /root/restore-snapshot.sh >&2

    log "done tendermint-init.sh"


  tendermint-start.sh: |
    #!/bin/bash

    # import lib scripts
    for f in /root/lib/*.sh; do source $f; done

    log () {
      >&2 echo "$THIS_SERVICE-start: $@"
    }

    err () {
      >&2 echo "$THIS_SERVICE-start: $@"
      exit 1
    }

    startup() {
      # start tendermint, add --log_level="*:debug" to debug
      log "Starting"

      if [ "$SNAPSHOTGUN_ENABLED" == "true" ]; then
        # if snapshot is taking place, wait until done
        wait_until_key_gone "snapshot-snapping"
      fi

      >&2 /bin/bash /root/startup-waits.sh
      /bin/tendermint node \
        --p2p.persistent_peers "$PERSISTENT_PEERS" \
        --log_level="*:debug" &
      pid=$!
      [ "$SNAPSHOTGUN_ENABLED" == "true" ] && redis_cli DEL "snapshot-$THIS_SERVICE-down"
    }

    shutdown() {
      log "Shutting down"
      >&2 /bin/bash /root/shutdown-waits.sh
      kill_and_wait $pid $THIS_SERVICE
      exit 0
    }

    # wait for a sigterm and run shutdown
    trap shutdown SIGTERM

    # Tendermint config
    /bin/bash /root/tendermint-init.sh

    # start tendermint
    startup

    # main loop
    while true; do
      if [ "$SNAPSHOTGUN_ENABLED" == "true" ]; then
        # snapshot if this service has been told to snapshot by redis
        sleep 2
        res=$(redis_cli GET "snapshot-$THIS_SERVICE")
        if [ "$res" == "1" ]; then
          height=$(cat /tendermint/data/priv_validator_state.json | jq -r ".height")
          log "$CHAIN height: $height"
          redis_cli SET "snapshot-$CHAIN-height" "$height"
          DECOY_PORT=$P2P_PORT make_service_snapshot
        fi
      else
        sleep 42
      fi
    done

  lib.sh: |
    log () {
      >&2 printf '{t:"%s", l:"%s", src:"%s", msg:"%s"}' \
        $(date +%F_%T) \
        "info" \
        "$log_src" \
        "$(printf "$@" | sed 's/"/\\\"/g')"
    }

    err () {
      >&2 printf '{t:"%s", l:"%s", src:"%s", msg:"%s"}' \
        $(date +%F_%T) \
        "err" \
        "$log_src" \
        "$(printf "$@" | sed 's/"/\\\"/g')"
      exit 1
    }

  noms-start.sh: |

    # import lib scripts
    for f in /root/lib/*.sh; do source $f; done
    log_src="$THIS_SERVICE-start"

    err () {
      >&2 echo "$THIS_SERVICE-start: $@"
      exit 1
    }

    mkdir -p /noms/data || log "/noms/data already created."

    # check to see if snapshot is needed
    DATA_DIR=/noms/data \
    DATA_EXISTS_FILE=/noms/data/manifest \
    SNAPSHOT_FILE=$THIS_SERVICE.tgz \
      /bin/bash /root/restore-snapshot.sh >&2

    startup() {
      log "Starting"

      if [ "$SNAPSHOTGUN_ENABLED" == "true" ]; then
        # if snapshot is taking place, wait until done
        tries_left=30 # approx 1 minute
        log "waiting for snapshot to finish"
        # wait until done snapping, or, timed out
        until [ "$resp" == "-1" ]; do
          [[ "$tries_left" -lt "1" ]] && break
          resp=$(redis_cli GET "snapshot-snapping")
          sleep 1
          tries_left=$((tries_left-1))
          log "Waiting $tries_left more times."
        done
      fi

      # start noms
      noms serve /noms/data --port=$NOMS_PORT &
      pid=$! # get noms pid
      [ "$SNAPSHOTGUN_ENABLED" == "true" ] && redis_cli DEL "snapshot-$THIS_SERVICE-down"
    }

    shutdown() {
      log "Shutting down"
      >&2 /bin/bash /root/shutdown-waits.sh
      kill_and_wait $pid $THIS_SERVICE
      exit 0
    }

    startup

    # wait for a sigterm and run shutdown
    trap shutdown SIGTERM

    # main loop
    while true; do
      if [ "$SNAPSHOTGUN_ENABLED" == "true" ]; then
        # snapshot if this service has been told to snapshot by redis
        sleep 2
        res=$(redis_cli GET "snapshot-$THIS_SERVICE")
        if [ "$res" == "1" ]; then
          DECOY_PORT=$NOMS_PORT make_service_snapshot
        fi
      else
        sleep 42
      fi
    done

  redis-start.sh: |

    # import lib scripts
    for f in /root/lib/*.sh; do source $f; done

    log () {
      >&2 echo "$THIS_SERVICE-start: $@"
    }

    err () {
      >&2 echo "$THIS_SERVICE-start: $@"
      exit 1
    }

    # check to see if snapshot is needed
    DATA_DIR=/redis \
    DATA_EXISTS_FILE=/redis/dump.rdb \
    SNAPSHOT_FILE=$THIS_SERVICE.tgz \
      /bin/bash /root/restore-snapshot.sh >&2

    startup() {
      log "Starting"

      if [ "$SNAPSHOTGUN_ENABLED" == "true" ]; then
        # if snapshot is taking place, wait until done
        tries_left=30 # approx 1 minute
        log "waiting for snapshot to finish"
        # wait until done snapping, or, timed out
        until [ "$resp" == "-1" ]; do
          [[ "$tries_left" -lt "1" ]] && break
          resp=$(redis_cli GET "snapshot-snapping")
          sleep 1
          tries_left=$((tries_left-1))
          log "Waiting $tries_left more times."
        done
      fi

      redis-server \
        --dir /redis \
        --save 60 1 \
        --tcp-backlog 128 \
        --port $REDIS_PORT &
      pid=$!
      [ "$SNAPSHOTGUN_ENABLED" == "true" ] && redis_cli DEL "snapshot-$THIS_SERVICE-down"
    }

    shutdown() {
      log "Shutting down"
      >&2 /bin/bash /root/shutdown-waits.sh
      kill_and_wait $pid $THIS_SERVICE
      exit 0
    }

    startup

    # wait for a sigterm and run shutdown
    trap shutdown SIGTERM

    # main loop
    while true; do
      if [ "$SNAPSHOTGUN_ENABLED" == "true" ]; then
        # snapshot if this service has been told to snapshot by redis
        sleep 2
        res=$(redis_cli GET "snapshot-$THIS_SERVICE")
        if [ "$res" == "1" ]; then
          DECOY_PORT=$REDIS_PORT make_service_snapshot
        fi
      else
        sleep 42
      fi
    done


  liveness-decoy.sh: |
    #!/bin/bash

    source /root/lib/log.sh
    log_src="$THIS_SERVICE-decoy"

    port=$1
    log "Starting liveness decoy on port $port"

    log_exit() {
      log "Ending liveness decoy on port $port"
    }

    trap log_exit EXIT

    # main
    while true; do
      nc -l -p "$port"
    done


  redis-cli.sh: |
    #!/bin/bash
    # https://github.com/caquino/redis-bash

    redis_client() {
      if [ ${#FUNCNAME[@]} -lt 100 ]; then
        FD=${1}
        shift;
        if [ ${#} -ne 0 ]; then # always use unified protocol and let the server validate the number of parameters
          local ARRAY=( "${@}" )
          local CMD=("*$[${#ARRAY[@]}]")
          local i=0
          for ((i=0;i<${#ARRAY[@]};i++)); do
            CMD=( "${CMD[@]}" "\$${#ARRAY[${i}]}" "${ARRAY[${i}]}" )
          done
          printf "%s\r\n" "${CMD[@]}" >&${FD}
        fi
        local ARGV
        read -r -u ${FD}
        REPLY=${REPLY:0:${#REPLY}-1}
        case ${REPLY} in
          -*|\$-*) # error message
            echo "${REPLY:1}"
            return 1;;
          \$*) # message size
            [ ${BASH_VERSINFO} -eq 3 ] && SIZEDELIM="n"
            [ ${REPLY:1} -gt 0 ] && read -r -${SIZEDELIM:-N} $[${REPLY:1}+2] -u ${FD} # read again to get the value itself
            ARGV=( "${REPLY:0:$[${#REPLY}-$[${BASH_VERSINFO}-2]]}" );;
          :*) # integer message
            ARGV=( "${REPLY:1}" );;
          \**) # bulk reply - recursive based on number of messages
            unset ARGV
            for ((ARGC="${REPLY:1}";${ARGC}>0;ARGC--)); do
              ARGV=("${ARGV[@]}" $(redis_client ${FD}))
            done;;
          +*) # standard message
            ARGV=( "${REPLY:1}" );;
          *) # wtf? just in case...
            ARGV=( "${ARGV[@]}" "${REPLY}" );;
        esac
        printf "%s\n" "${ARGV[@]}"
      else
        printf "ERROR: Recursive function call limit.\n"
      fi
    }

    REDISHOST=localhost
    REDISPORT=6379
    REPEAT=1
    DELAY=0
    while getopts ":h:n:p:r:a:i:" opt
    do
        case ${opt} in
            h) REDISHOST=${OPTARG};;
            n) REDISDB=${OPTARG};;
            p) REDISPORT=${OPTARG};;
            r) REPEAT=${OPTARG};;
            a) AUTH=${OPTARG};;
            i) DELAY=${OPTARG};;
        esac
    done
    shift $((${OPTIND} - 1))
    if [ "${REDISHOST}" != "" ] && [ "${REDISPORT}" != "" ]
    then
        # open fd
        exec 6<>/dev/tcp/"$REDISHOST"/"$REDISPORT" || exit
    else
        echo "Wrong arguments"
        exit 255
    fi
    [ "${AUTH}" != "" ] && redis_client 6 AUTH "$AUTH" > /dev/null
    [ "${REDISDB}" != "" ] && redis_client 6 SELECT "$REDISDB" > /dev/null
    for ((z=1;z<=${REPEAT};z++))
    do
        redis_client 6 "$@" || exit
        [ ${DELAY} -gt 0 ] && sleep ${DELAY}
    done
    exec 6>&- #close fd
