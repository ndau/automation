{{ if .Values.ndau.enabled }}

kind: ConfigMap
metadata:
  name: {{ template "nodegroup.fullname" . }}-ndau-tendermint-config
  labels:
    app: {{ template "nodegroup.name" . }}
    chart: {{ template "nodegroup.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
apiVersion: v1
data:
  persistentPeers: {{ default "" ( b64dec .Values.ndau.tendermint.persistentPeers ) | quote }}

  genesis.json: {{ b64dec .Values.ndau.genesis | quote }}

  node_key.json: {{ b64dec .Values.ndau.nodeKey | quote }}

  priv_validator_key.json: {{ b64dec .Values.ndau.privValidatorKey | quote }}

  priv_validator_state.json: {{ b64dec .Values.ndau.privValidatorState | quote }}

  make-snapshot.sh: |

    errcho() {
      >&2 echo $@
    }

    # s3_upload takes the first argument as the full local file path and uploads it to s3
    # at the location defined by the local variable $s3_path
    s3_upload() {

      local local_file=$1
      local s3_file=$2

      # puts the snapshot somewhere safe while it's being built.
      temp_token=$(/bin/bash /root/redis-cli.sh -h $R_HOST get "snapshot-temp-token")

      # prepare headers and signature
      the_date=$(date -R)
      s3_path="/{{ .Values.aws.snapshotBucket }}/{{ .Values.networkName }}/${temp_token}/${this_node}-${height}/$s3_file"
      content_type="application/octet-stream"
      signable_bytes="PUT\n\n${content_type}\n${the_date}\n${s3_path}"
      signature=$(echo -en $signable_bytes | openssl sha1 -hmac $AWS_SECRET -binary | base64)

      # upload the local file
      curl -X PUT -T "$local_file" \
        -H "Host: s3.amazonaws.com" \
        -H "Date: $the_date" \
        -H "Content-Type: $content_type" \
        -H "Authorization: AWS $AWS_KEY:$signature" \
        "http://s3.amazonaws.com$s3_path"

    }

    this_node=ndau
    this_app=tm

    # wait for redis
    errcho "Pinging redis."
    while true ; do
      # get redis readiness
      if ! /bin/bash /root/redis-cli.sh -h $R_HOST PING; then
        errcho "Waiting for redis to pong."
        sleep 1
      else
        errcho "Redis is ready."
        break
      fi
    done

    # wait for height value
    while [ "$height" == "-1" ] || [ -z "$height" ]; do
      sleep 2
      height=$(timeout -t 2 /bin/bash /root/redis-cli.sh -h $R_HOST get "snapshot-$CHAIN-height")
    done
    errcho "Got height: $height"

    # wait until noms snapshot is finished
    tries_left=60 # approx 2 minutes
    errcho "waiting for $CHAIN noms snapshot to finish" # TODO standardize errcho/log/err etx
    while [ "$noms_snapshot_resp" != "-1" ] || (( $tries_left == 0 )); do
      noms_snapshot_resp=$(timeout -t 1 /bin/bash /root/redis-cli.sh -h $R_HOST get "snapshot-$CHAIN-noms")
      sleep 1
      (($tries_left--))
      errcho "Waiting $tries more times."
    done
    errcho "done waiting"
    if [ "$noms_snapshot_resp" == "-1" ]; then
      errcho "$CHAIN noms snapshot didn't finish"
    fi

    # upload the tendermint databases

    # check to see if the snapshot is already there
    tar_file=$THIS_SERVICE.tgz
    s3_path="/{{ .Values.aws.snapshotBucket }}/{{ .Values.networkName }}/${this_node}-${height}/${tar_file}"

    if curl_response=$(curl -I -f "http://s3.amazonaws.com$s3_path"); then
      errcho "Snapshot $s3_path already exists. Will not upload."
    else
      errcho "Uploading snapshot $s3_path."

      (
        cd /tendermint/data
        tar cvzf /root/$tar_file ./blockstore.db ./state.db
      )

      s3_upload "/root/$tar_file" "$tar_file"

    fi


    # upload genesis

    tar_file=${this_node}-genesis.tgz

    # make the tar ball
    (
      cd /tendermint/config
      tar cvzf /root/$tar_file ./genesis.json
    )

    s3_upload "/root/$tar_file" "$tar_file"

    # delete service flag
    /bin/bash /root/redis-cli.sh -h $R_HOST DEL "snapshot-$THIS_SERVICE"

    # create a manifest file
    jq --arg date "$(date)" \
      --arg height "$height" \
      ". | \
      .[\"date\"]=\$date | \
      .[\"height\"]=\$height " \
      <<< '{}' > /root/manifest.json
    errcho "Created manifest file: $(cat /root/manifest.json)"

    s3_upload "/root/manifest.json" "${this_node}-manifest.json"


  config.toml: |
    # This is a TOML config file.
    # For more information, see https://github.com/toml-lang/toml

    ##### main base config options #####

    # TCP or UNIX socket address of the ABCI application,
    # or the name of an ABCI application compiled in with the Tendermint binary
    proxy_app = "tcp://{{ include "nodegroup.fullname" . }}-ndaunode-service:{{ .Values.ndaunode.port }}"

    # A custom human readable name for this node
    moniker = {{ .Values.ndau.tendermint.moniker | quote }}

    # If this node is many blocks behind the tip of the chain, FastSync
    # allows them to catchup quickly by downloading blocks in parallel
    # and verifying their commits
    fast_sync = true

    # Database backend: leveldb | memdb | cleveldb
    db_backend = "leveldb"

    # Database directory
    db_dir = "data"

    # Output level for logging, including package level options
    log_level = "main:info,state:info,*:error"

    # Output format: 'plain' (colored text) or 'json'
    log_format = "plain"

    ##### additional base config options #####

    # Path to the JSON file containing the initial validator set and other meta data
    genesis_file = "config/genesis.json"

    # Path to the JSON file containing the private key to use as a validator in the consensus protocol
    priv_validator_key_file = "config/priv_validator_key.json"

    # Path to the JSON file containing the last sign state of a validator
    priv_validator_state_file = "data/priv_validator_state.json"

    # TCP or UNIX socket address for Tendermint to listen on for
    # connections from an external PrivValidator process
    priv_validator_laddr = ""

    # Path to the JSON file containing the private key to use for node authentication in the p2p protocol
    node_key_file = "config/node_key.json"

    # Mechanism to connect to the ABCI application: socket | grpc
    abci = "socket"

    # TCP or UNIX socket address for the profiling server to listen on
    prof_laddr = ""

    # If true, query the ABCI app on connecting to a new peer
    # so the app can decide if we should keep the connection or not
    filter_peers = false

    ##### advanced configuration options #####

    ##### rpc server configuration options #####
    [rpc]

    # TCP or UNIX socket address for the RPC server to listen on
    laddr = "tcp://0.0.0.0:{{ required ".Values.ndau.tendermint.ports.rpc required" .Values.ndau.tendermint.ports.rpc }}"

    # A list of origins a cross-domain request can be executed from
    # Default value '[]' disables cors support
    # Use '["*"]' to allow any origin
    cors_allowed_origins = []

    # A list of methods the client is allowed to use with cross-domain requests
    cors_allowed_methods = ["HEAD", "GET", "POST", ]

    # A list of non simple headers the client is allowed to use with cross-domain requests
    cors_allowed_headers = ["Origin", "Accept", "Content-Type", "X-Requested-With", "X-Server-Time", ]

    # TCP or UNIX socket address for the gRPC server to listen on
    # NOTE: This server only supports /broadcast_tx_commit
    grpc_laddr = ""

    # Maximum number of simultaneous connections.
    # Does not include RPC (HTTP&WebSocket) connections. See max_open_connections
    # If you want to accept a larger number than the default, make sure
    # you increase your OS limits.
    # 0 - unlimited.
    # Should be < {ulimit -Sn} - {MaxNumInboundPeers} - {MaxNumOutboundPeers} - {N of wal, db and other open files}
    # 1024 - 40 - 10 - 50 = 924 = ~900
    grpc_max_open_connections = 900

    # Activate unsafe RPC commands like /dial_seeds and /unsafe_flush_mempool
    unsafe = false

    # Maximum number of simultaneous connections (including WebSocket).
    # Does not include gRPC connections. See grpc_max_open_connections
    # If you want to accept a larger number than the default, make sure
    # you increase your OS limits.
    # 0 - unlimited.
    # Should be < {ulimit -Sn} - {MaxNumInboundPeers} - {MaxNumOutboundPeers} - {N of wal, db and other open files}
    # 1024 - 40 - 10 - 50 = 924 = ~900
    max_open_connections = 900

    ##### peer to peer configuration options #####
    [p2p]

    # Address to listen for incoming connections
    laddr = "tcp://0.0.0.0:{{ required ".Values.ndau.tendermint.ports.p2p required" .Values.ndau.tendermint.ports.p2p }}"

    # Address to advertise to peers for them to dial
    # If empty, will use the same port as the laddr,
    # and will introspect on the listener or use UPnP
    # to figure out the address.
    external_address = ""

    # Comma separated list of seed nodes to connect to
    seeds = ""

    # Comma separated list of nodes to keep persistent connections to
    persistent_peers = ""

    # UPNP port forwarding
    upnp = false

    # Path to address book
    addr_book_file = "config/addrbook.json"

    # Set true for strict address routability rules
    # Set false for private or local networks
    addr_book_strict = false # fet: false means multiple nodes can run on the same ip

    # Maximum number of inbound peers
    max_num_inbound_peers = 40

    # Maximum number of outbound peers to connect to, excluding persistent peers
    max_num_outbound_peers = 10

    # Time to wait before flushing messages out on the connection
    flush_throttle_timeout = "100ms"

    # Maximum size of a message packet payload, in bytes
    max_packet_msg_payload_size = 1024

    # Rate at which packets can be sent, in bytes/second
    send_rate = 5120000

    # Rate at which packets can be received, in bytes/second
    recv_rate = 5120000

    # Set true to enable the peer-exchange reactor
    pex = true

    # Seed mode, in which node constantly crawls the network and looks for
    # peers. If another node asks it for addresses, it responds and disconnects.
    #
    # Does not work if the peer-exchange reactor is disabled.
    seed_mode = false

    # Comma separated list of peer IDs to keep private (will not be gossiped to other peers)
    private_peer_ids = ""

    # Toggle to disable guard against peers connecting from the same ip.
    allow_duplicate_ip = true

    # Peer connection configuration.
    handshake_timeout = "20s"
    dial_timeout = "3s"

    ##### mempool configuration options #####
    [mempool]

    recheck = true
    broadcast = true
    wal_dir = ""

    # size of the mempool
    size = 5000

    # size of the cache (used to filter transactions we saw earlier)
    cache_size = 10000

    ##### consensus configuration options #####
    [consensus]

    wal_file = "data/cs.wal/wal"

    timeout_propose = "3s"
    timeout_propose_delta = "500ms"
    timeout_prevote = "1s"
    timeout_prevote_delta = "500ms"
    timeout_precommit = "1s"
    timeout_precommit_delta = "500ms"
    timeout_commit = "1s"

    # Make progress as soon as we have all the precommits (as if TimeoutCommit = 0)
    skip_timeout_commit = false

    # EmptyBlocks mode and possible interval between empty blocks
    # create_empty_blocks = true
    create_empty_blocks_interval = "{{ .Values.ndau.tendermint.createEmptyBlocksInterval }}"

    # Reactor sleep duration parameters
    peer_gossip_sleep_duration = "100ms"
    peer_query_maj23_sleep_duration = "2s"

    # Block time parameters. Corresponds to the minimum time increment between consecutive blocks.
    blocktime_iota = "1s"

    ##### transactions indexer configuration options #####
    [tx_index]

    # What indexer to use for transactions
    #
    # Options:
    #   1) "null"
    #   2) "kv" (default) - the simplest possible indexer, backed by key-value storage (defaults to levelDB; see DBBackend).
    indexer = "kv"

    # Comma-separated list of tags to index (by default the only tag is "tx.hash")
    #
    # You can also index transactions by height by adding "tx.height" tag here.
    #
    # It's recommended to index only a subset of tags due to possible memory
    # bloat. This is, of course, depends on the indexer's DB and the volume of
    # transactions.
    index_tags = ""

    # When set to true, tells indexer to index all tags (predefined tags:
    # "tx.hash", "tx.height" and all tags from DeliverTx responses).
    #
    # Note this may be not desirable (see the comment above). IndexTags has a
    # precedence over IndexAllTags (i.e. when given both, IndexTags will be
    # indexed).
    index_all_tags = false

    ##### instrumentation configuration options #####
    [instrumentation]

    # When true, Prometheus metrics are served under /metrics on
    # PrometheusListenAddr.
    # Check out the documentation for the list of available metrics.
    prometheus = false

    # Address to listen for Prometheus collector(s) connections
    prometheus_listen_addr = ":26660"

    # Maximum number of simultaneous connections.
    # If you want to accept a larger number than the default, make sure
    # you increase your OS limits.
    # 0 - unlimited.
    max_open_connections = 3

    # Instrumentation namespace
    namespace = "tendermint"

{{ end }}
