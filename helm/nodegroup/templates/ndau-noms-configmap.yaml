{{ if .Values.ndau.enabled }}

kind: ConfigMap
metadata:
  name: {{ template "nodegroup.fullname" . }}-ndau-noms-config
  labels:
    app: {{ template "nodegroup.name" . }}
    chart: {{ template "nodegroup.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
apiVersion: v1
data:
  startup-waits.sh: |

    # import lib scripts
    for f in /root/lib/*.sh; do source $f; done

    log () {
      >&2 echo "$THIS_SERVICE-startup-waits: $@"
    }

    err () {
      >&2 echo "$THIS_SERVICE-startup-waits: $@"
      exit 1
    }

    log "Starting wait loops"
    wait_for_connection redis {{ template "nodegroup.fullname" . }}-chaos-redis-service {{ .Values.chaos.redis.port }}
    wait_for_connection noms {{ template "nodegroup.fullname" . }}-chaos-noms-service {{ .Values.chaos.noms.port }}
    log "Done"

  shutdown-waits.sh: |

    # import lib scripts
    for f in /root/lib/*.sh; do source $f; done

    log () {
      >&2 echo "$THIS_SERVICE-shutdown-waits: $@"
    }

    err () {
      >&2 echo "$THIS_SERVICE-shutdown-waits: $@"
      exit 1
    }

    log "Starting wait loops"
    wait_until_down ndaunode {{ template "nodegroup.fullname" . }}-ndaunode-service {{ .Values.ndaunode.port }}
    log "Done"

  make-snapshot.sh: |

    # import lib scripts
    for f in /root/lib/*.sh; do source $f; done

    log () {
      >&2 echo "$THIS_SERVICE-make-snapshot: $@"
    }

    err () {
      >&2 echo "$THIS_SERVICE-make-snapshot: $@"
      exit 1
    }

    this_node=ndau
    this_app=noms
    BUCKET={{ .Values.aws.snapshotBucket }}
    NETWORK={{ .Values.networkName }}

    # wait for redis
    log "Pinging redis."
    while true ; do
      # get redis readiness
      if ! redis_cli PING; then
        log "Waiting for redis to pong."
        sleep 1
      else
        log "Redis is ready."
        break
      fi
    done

    # wait for height value
    height="$(get_height $CHAIN)"

    # upload the database

    # check to see if the snapshot is already there
    tar_file=$THIS_SERVICE.tgz
    s3_path="/{{ .Values.aws.snapshotBucket }}/{{ .Values.networkName }}/${this_node}-${height}/${tar_file}"

    if curl_response=$(curl -I -f "http://s3.amazonaws.com$s3_path"); then
      log "Snapshot $s3_path already exists. Will not upload."
    else
      log "Uploading snapshot $s3_path."

      (
        cd /noms/data
        tar cvzf /root/$tar_file *
      )

      s3_upload "/root/$tar_file" "$tar_file"

    fi

    # delete the service flag
    redis_cli DEL snapshot-$THIS_SERVICE

{{ end }}
