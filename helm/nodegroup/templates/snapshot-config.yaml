
kind: ConfigMap
metadata:
  name: {{ template "nodegroup.fullname" . }}-snapshot-config
  labels:
    app: {{ template "nodegroup.name" . }}
    chart: {{ template "nodegroup.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
apiVersion: v1
data:
  listener.sh: |

    log_src="listener"
    log () {
      >&2 printf '{t:"%s", l:"%s", src:"%s", msg:"%s"}' \
        $(date +%F_%T) \
        "info" \
        "$log_src" \
        "$(printf "$@" | sed 's/"/\\\"/g')"
    }

    err () {
      >&2 printf '{t:"%s", l:"%s", src:"%s", msg:"%s"}' \
        $(date +%F_%T) \
        "err" \
        "$log_src" \
        "$(printf "$@" | sed 's/"/\\\"/g')"
      exit 1
    }

    log "Starting listener loop"

    while true; do
      req=$(nc -l -p 3333)
      log "req: $req"
      if [ "$req" == "snap" ]; then
        log "Starting snapshot"
        >&2 /bin/bash /root/start.sh
      fi
    done

  start.sh: |

    # import lib scripts
    for f in /root/lib/*.sh; do source $f; done

    # this will start the snapshot process and wait for it to complete.
    log () {
      >&2 echo "start.sh: $@"
    }

    err () {
      >&2 echo "start.sh: $@"
      exit 1
    }

    log "Make sure all services are currently running"
    wait_for_connection ndau-redis {{ template "nodegroup.fullname" . }}-ndau-redis-service {{ .Values.ndau.redis.port }}
    wait_for_connection ndau-noms {{ template "nodegroup.fullname" . }}-ndau-noms-service {{ .Values.ndau.noms.port }}
    wait_for_connection ndau-tm {{ template "nodegroup.fullname" . }}-ndau-tendermint-service {{ .Values.ndau.tendermint.ports.p2p }}
    wait_for_connection ndaunode {{ template "nodegroup.fullname" . }}-ndaunode-service {{ .Values.ndaunode.port }}

    # try to set snapping flag if not set. If set, get it.
    # Everything expires after 120 seconds. If things get hung up, it's possible to restart.
    snap_res=$(redis-cli SET "snapshot-snapping" 1 EX 120 NX)
    log "snap_res: $snap_res"
    if [ "$snap_res" == "OK" ]; then

      log "Beginning new snapshot process for all services."
      snapping=1

      # get a temp token and upload there first
      # this will prevent partial uploads from being downloaded
      temp_token=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
      log "token for temporary directory on S3 $temp_token"
      redis-cli SET snapshot-temp-token "$temp_token" EX 120

      # tell services to make a snapshot
      # set to value of "1" and expire in 120 seconds
      redis-cli SET snapshot-ndau-tm 1 EX 120
      redis-cli SET snapshot-ndau-noms 1 EX 120
      redis-cli SET snapshot-ndau-redis 1 EX 120
      redis-cli SET snapshot-ndaunode 1 EX 120

    else
      # could return either 1 or 0 on second run
      snapping=$(redis-cli GET "snapshot-snapping")
      log "Snapping already in progress: snapshot-snapping = $snapping"
      exit 0
    fi

    # wait until everyone is done, then remove snapping key
    # Don't check ndaunode, it doesn't backup anything
    resp="1"

    # keep waiting while the key is not there
    while true; do
      if ! echo "$resp" | grep "1"; then
        log "Done waiting"
        break
      fi
      log "Snapshot jobs not finished. Waiting..."
      sleep 5
      status_ndau_tm=$(redis-cli GET snapshot-ndau-tm)
      status_ndau_redis=$(redis-cli GET snapshot-ndau-redis)
      status_ndau_noms=$(redis-cli GET snapshot-ndau-noms)

      log "ndau_tm: $status_ndau_tm"
      log "ndau_redis: $status_ndau_redis"
      log "ndau_noms: $status_ndau_noms"

      resp="\
        $status_ndau_tm \
        $status_ndau_redis \
        $status_ndau_noms
    done
    log "No more snapshot jobs detected."

    ndau_height=$(redis-cli GET snapshot-ndau-height)
    log "ndau chain height: $ndau_height"

    # verify the snapshot
    log "Verifying snapshot"
    BP=ndau-snapshots/{{ .Values.networkName }} # base path
    if \
      aws s3 ls "$BP/$temp_token/ndau-$ndau_height/ndau-genesis.tgz" && \
      aws s3 ls "$BP/$temp_token/ndau-$ndau_height/ndau-tm.tgz" && \
      aws s3 ls "$BP/$temp_token/ndau-$ndau_height/ndau-noms.tgz" && \
      aws s3 ls "$BP/$temp_token/ndau-$ndau_height/ndau-redis.tgz"

      log "Snapshot verified"

      aws s3 mv "s3://$BP/$temp_token/ndau-$ndau_height/ndau-tm.tgz" "s3://$BP/ndau-$ndau_height/ndau-tm.tgz"
      aws s3 mv "s3://$BP/$temp_token/ndau-$ndau_height/ndau-genesis.tgz" "s3://$BP/ndau-$ndau_height/ndau-genesis.tgz"
      aws s3 mv "s3://$BP/$temp_token/ndau-$ndau_height/ndau-noms.tgz" "s3://$BP/ndau-$ndau_height/ndau-noms.tgz"
      aws s3 mv "s3://$BP/$temp_token/ndau-$ndau_height/ndau-redis.tgz" "s3://$BP/ndau-$ndau_height/ndau-redis.tgz"
      aws s3 mv "s3://$BP/$temp_token/ndau-$ndau_height/ndau-manifest.json" "s3://$BP/ndau-$ndau_height/ndau-manifest.json"
    else
      log "Error: snapshot at s3://$BP/$temp_token could not be verified."
    fi

    # uploading the snapshot should be done now
    log "Cleaning up temporary keys."
    redis-cli DEL \
      snapshot-snapping \
      snapshot-ndau-height \
      snapshot-temp-token \
      snapshot-ndaunode \

    log "Done"
