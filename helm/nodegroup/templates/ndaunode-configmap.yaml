{{ if .Values.ndau.enabled }}

kind: ConfigMap
metadata:
  name: {{ template "nodegroup.fullname" . }}-ndau-config
apiVersion: v1
data:
  config.toml: |
    ChaosAddress = "CHAOS_ADDRESS_TOKEN"
    UseMock = "" # This needs to be empty

    ChaosTimeout = 500 # seconds

    [SystemVariableIndirect]
      Key = "c3Zp"
      Namespace = "NAMESPACE_TOKEN"

  init.sh: |

    CURL_RETRIES=10
    CURL_RETRY_DELAY=0
    CFG_DIR=$NDAUHOME/ndau
    NDAU_CONFIG_TOML="$CFG_DIR"/config.toml
    NAMESPACE_FILE="$CFG_DIR"/svi-namespace
    NAMESPACE_URL=https://s3.amazonaws.com/ndau-snapshots/svi-namespace

    # Copy readonly config files to real config files
    if [ ! -d "$CFG_DIR" ]; then
      echo "Creating ndau config directory. $CFG_DIR"
      mkdir -p "$CFG_DIR"
    else
      echo "Not creating ndau config directory. $CFG_DIR"
    fi

    if [ ! -f "$NDAU_CONFIG_TOML" ]; then

      echo "copying config.toml"
      cp /root/config-ro/config.toml "$NDAU_CONFIG_TOML"

      echo "getting new svi-namespace"
      NAMESPACE_URL=https://s3.amazonaws.com/ndau-snapshots/svi-namespace
      if curl "$NAMESPACE_URL" -o "$NAMESPACE_FILE" --retry $CURL_RETRIES --retry-delay 0; then
        SVI_NAMESPACE=$(cat "$NAMESPACE_FILE")
        echo "Fetched namsepace: $SVI_NAMESPACE"
      else
        echo "could not get namespace from $NAMESPACE_URL"
        if [ -f "$NAMESPACE_FILE" ]; then
          SVI_NAMESPACE=$(cat "$NAMESPACE_FILE")
          echo "Using previously fetched namsepace: $SVI_NAMESPACE"
        else
          echo "No previously fetched namsepace at: "$NAMESPACE_FILE""
          exit 1
        fi
      fi

      echo "replacing namespace token in $NDAU_CONFIG_TOML"
      sed -i "s~NAMESPACE_TOKEN~$SVI_NAMESPACE~" "$NDAU_CONFIG_TOML"

      echo "replacing chaos address"

      fullname="{{ template "nodegroup.fullname" . }}"
      RELEASE=$(echo ${fullname//-/_} | awk '{print toupper($0)}')
      HOST_VAR=${RELEASE}_CHAOS_TENDERMINT_SERVICE_SERVICE_HOST
      RPC_PORT_VAR=${RELEASE}_CHAOS_TENDERMINT_SERVICE_SERVICE_PORT_RPC

      # variable indirection
      host=${!HOST_VAR}
      rpc_port=${!RPC_PORT_VAR}

      chaos_address=http://${host}:${rpc_port}

      sed -i "s~CHAOS_ADDRESS_TOKEN~$chaos_address~" "$NDAU_CONFIG_TOML"

      echo "$NDAU_CONFIG_TOML is now:"
      cat "$NDAU_CONFIG_TOML"
    else
      echo "config.toml already exists. Will not update."
    fi

    # Show what files are there
    find /root/.ndau

{{ end }}
