{{ if .Values.ndau.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "nodegroup.fullname" . }}-ndau-noms
  labels:
    app: {{ template "nodegroup.name" . }}
    chart: {{ template "nodegroup.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "nodegroup.name" . }}-ndau-noms
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "nodegroup.name" . }}-ndau-noms
        release: {{ .Release.Name }}
    spec:
      {{ if .Values.minikube }}
      imagePullSecrets:
      - name: awsecr-cred
      {{ end }}
      containers:
      - name: noms
        image: "{{ .Values.ndau.noms.image.repository }}:{{ .Values.ndau.noms.image.tag }}"
        imagePullPolicy: {{ .Values.ndau.noms.image.pullPolicy }}
        command:
          - /bin/sh
          - -c
          - |-

            mkdir -p /noms/data || echo "/noms/data already created."

            # check to see if snapshot is needed
            DATA_DIR=/noms/data \
            DATA_EXISTS_FILE=/noms/data/manifest \
            SNAPSHOT_FILE=ndau-noms.tgz \
            LOG_TAG=ndau-noms \
              /bin/sh /root/restore-snapshot.sh

            # start noms
            noms serve /noms/data &
            pid=$!

            shutdown() {
              echo "Shutting down"
              kill $pid
              while kill -0 $pid; do echo "waiting for $THIS_SERVICE to stop"; sleep 1; done;
              echo "done waiting"
              [ "$SNAPSHOTGUN_ENABLED" == "true" ] && [ "$SNAPSHOT_CALLED" == "true" ] && /bin/bash -x /root/make-snapshot.sh >&1
              exit 0
            }

            # wait for a sigterm and run shutdown
            trap shutdown SIGTERM

            # check redis and loop until this service has been told to shutdown by redis
            while [ "$res" != "1" ]; do
              echo "." # proof of life
              sleep 2
              res=$(timeout -t 2 /bin/bash /root/redis-cli.sh -h $R_HOST get "snapshot-$THIS_SERVICE")
            done
            SNAPSHOT_CALLED="true"
            shutdown
        readinessProbe:
          tcpSocket:
            port: {{ .Values.ndau.noms.port }}
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          tcpSocket:
            port: {{ .Values.ndau.noms.port }}
          initialDelaySeconds: 5
          periodSeconds: 5
        env:
        - name: SNAPSHOTGUN_ENABLED
          value: "{{ .Values.snapshot.enabled }}"
        - name: AWS_KEY
          value: {{ .Values.aws.accessKeyID }}
        - name: AWS_SECRET
          value: {{ .Values.aws.secretAccessKey }}
        - name: R_HOST # for snapshot coordination
          value: {{ template "nodegroup.fullname" . }}-snapshot-redis
        - name: THIS_SERVICE
          value: ndau-noms
        - name: CHAIN
          value: "ndau"
        - name: SNAPSHOT_CODE
          value: {{ .Values.ndau.noms.snapshotCode }}
        ports:
        - containerPort: {{ .Values.ndau.noms.port }}
        volumeMounts:
        - name: noms-start-sh
          mountPath: /root/noms-start.sh
          subPath: noms-start.sh
        - name: make-snapshot-sh
          mountPath: /root/make-snapshot.sh
          subPath: make-snapshot.sh
        - name: snapshot-sh
          mountPath: /root/restore-snapshot.sh
          subPath: restore-snapshot.sh
        - name: redis-cli-sh
          mountPath: /root/redis-cli.sh
          subPath: redis-cli.sh
        - name: noms-volume
          mountPath: /noms
      volumes:
      - name: noms-start-sh
        configMap:
          name: {{ template "nodegroup.fullname" . }}-nodegroup-config
          items:
          - key: noms-start.sh
            path: noms-start.sh

      - name: noms-volume
        persistentVolumeClaim:
          claimName: {{ template "nodegroup.fullname" . }}-ndau-noms-claim
      # scripts
      - name: make-snapshot-sh
        configMap:
          name: {{ template "nodegroup.fullname" . }}-ndau-noms-config
          items:
          - key: make-snapshot.sh
            path: make-snapshot.sh
      - name: snapshot-sh
        configMap:
          name: {{ template "nodegroup.fullname" . }}-nodegroup-config
          items:
          - key: restore-snapshot.sh
            path: restore-snapshot.sh
      - name: redis-cli-sh
        configMap:
          name: {{ template "nodegroup.fullname" . }}-nodegroup-config
          items:
          - key: redis-cli.sh
            path: redis-cli.sh
      resources:
        requests:
          memory: {{ .Values.ndau.noms.resources.requests.memory }}
          cpu: {{ .Values.ndau.noms.resources.requests.cpu }}
        limits:
          memory: {{ .Values.ndau.noms.resources.limits.memory }}
          cpu: {{ .Values.ndau.noms.resources.limits.cpu }}

{{ end }}
